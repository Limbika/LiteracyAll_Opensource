package com.literacyall.app.dao;

import java.util.List;
import com.literacyall.app.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TASK".
 */
public class Task {

    private Long id;
    private long uniqId;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String taskImage;
    /** Not-null value. */
    private String type;
    private int backgroundColor;
    private int slideSequence;
    private Boolean active;
    private java.util.Date createdAt;
    private java.util.Date updatedAt;
    private Long taskPackId;
    /** Not-null value. */
    private String feedbackImage;
    private int feedbackAnimation;
    private int positiveAnimation;
    private int negativeAnimation;
    /** Not-null value. */
    private String feedbackSound;
    /** Not-null value. */
    private String positiveSound;
    /** Not-null value. */
    private String negativeSound;
    private int feedbackType;
    private int errorBgColor;
    /** Not-null value. */
    private String errorImage;
    /** Not-null value. */
    private String errortext;
    private int errorMandatoryScreen;
    /** Not-null value. */
    private String sequenceText;
    private long userId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TaskDao myDao;

    private List<Item> items;
    private List<Result> taskResults;

    public Task() {
    }

    public Task(Long id) {
        this.id = id;
    }

    public Task(Long id, long uniqId, String name, String taskImage, String type, int backgroundColor, int slideSequence, Boolean active, java.util.Date createdAt, java.util.Date updatedAt, Long taskPackId, String feedbackImage, int feedbackAnimation, int positiveAnimation, int negativeAnimation, String feedbackSound, String positiveSound, String negativeSound, int feedbackType, int errorBgColor, String errorImage, String errortext, int errorMandatoryScreen, String sequenceText, long userId) {
        this.id = id;
        this.uniqId = uniqId;
        this.name = name;
        this.taskImage = taskImage;
        this.type = type;
        this.backgroundColor = backgroundColor;
        this.slideSequence = slideSequence;
        this.active = active;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.taskPackId = taskPackId;
        this.feedbackImage = feedbackImage;
        this.feedbackAnimation = feedbackAnimation;
        this.positiveAnimation = positiveAnimation;
        this.negativeAnimation = negativeAnimation;
        this.feedbackSound = feedbackSound;
        this.positiveSound = positiveSound;
        this.negativeSound = negativeSound;
        this.feedbackType = feedbackType;
        this.errorBgColor = errorBgColor;
        this.errorImage = errorImage;
        this.errortext = errortext;
        this.errorMandatoryScreen = errorMandatoryScreen;
        this.sequenceText = sequenceText;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaskDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getUniqId() {
        return uniqId;
    }

    public void setUniqId(long uniqId) {
        this.uniqId = uniqId;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getTaskImage() {
        return taskImage;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTaskImage(String taskImage) {
        this.taskImage = taskImage;
    }

    /** Not-null value. */
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(String type) {
        this.type = type;
    }

    public int getBackgroundColor() {
        return backgroundColor;
    }

    public void setBackgroundColor(int backgroundColor) {
        this.backgroundColor = backgroundColor;
    }

    public int getSlideSequence() {
        return slideSequence;
    }

    public void setSlideSequence(int slideSequence) {
        this.slideSequence = slideSequence;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    public Long getTaskPackId() {
        return taskPackId;
    }

    public void setTaskPackId(Long taskPackId) {
        this.taskPackId = taskPackId;
    }

    /** Not-null value. */
    public String getFeedbackImage() {
        return feedbackImage;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFeedbackImage(String feedbackImage) {
        this.feedbackImage = feedbackImage;
    }

    public int getFeedbackAnimation() {
        return feedbackAnimation;
    }

    public void setFeedbackAnimation(int feedbackAnimation) {
        this.feedbackAnimation = feedbackAnimation;
    }

    public int getPositiveAnimation() {
        return positiveAnimation;
    }

    public void setPositiveAnimation(int positiveAnimation) {
        this.positiveAnimation = positiveAnimation;
    }

    public int getNegativeAnimation() {
        return negativeAnimation;
    }

    public void setNegativeAnimation(int negativeAnimation) {
        this.negativeAnimation = negativeAnimation;
    }

    /** Not-null value. */
    public String getFeedbackSound() {
        return feedbackSound;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFeedbackSound(String feedbackSound) {
        this.feedbackSound = feedbackSound;
    }

    /** Not-null value. */
    public String getPositiveSound() {
        return positiveSound;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPositiveSound(String positiveSound) {
        this.positiveSound = positiveSound;
    }

    /** Not-null value. */
    public String getNegativeSound() {
        return negativeSound;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNegativeSound(String negativeSound) {
        this.negativeSound = negativeSound;
    }

    public int getFeedbackType() {
        return feedbackType;
    }

    public void setFeedbackType(int feedbackType) {
        this.feedbackType = feedbackType;
    }

    public int getErrorBgColor() {
        return errorBgColor;
    }

    public void setErrorBgColor(int errorBgColor) {
        this.errorBgColor = errorBgColor;
    }

    /** Not-null value. */
    public String getErrorImage() {
        return errorImage;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setErrorImage(String errorImage) {
        this.errorImage = errorImage;
    }

    /** Not-null value. */
    public String getErrortext() {
        return errortext;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setErrortext(String errortext) {
        this.errortext = errortext;
    }

    public int getErrorMandatoryScreen() {
        return errorMandatoryScreen;
    }

    public void setErrorMandatoryScreen(int errorMandatoryScreen) {
        this.errorMandatoryScreen = errorMandatoryScreen;
    }

    /** Not-null value. */
    public String getSequenceText() {
        return sequenceText;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSequenceText(String sequenceText) {
        this.sequenceText = sequenceText;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Item> getItems() {
        if (items == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemDao targetDao = daoSession.getItemDao();
            List<Item> itemsNew = targetDao._queryTask_Items(id);
            synchronized (this) {
                if(items == null) {
                    items = itemsNew;
                }
            }
        }
        return items;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetItems() {
        items = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Result> getTaskResults() {
        if (taskResults == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ResultDao targetDao = daoSession.getResultDao();
            List<Result> taskResultsNew = targetDao._queryTask_TaskResults(id);
            synchronized (this) {
                if(taskResults == null) {
                    taskResults = taskResultsNew;
                }
            }
        }
        return taskResults;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTaskResults() {
        taskResults = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
