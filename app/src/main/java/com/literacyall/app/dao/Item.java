package com.literacyall.app.dao;

import java.util.List;
import com.literacyall.app.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ITEM".
 */
public class Item {

    private Long id;
    private Float x;
    private Float y;
    private Integer rotation;
    private Long key;
    private Integer isCircleView;
    private Integer circleColor;
    /** Not-null value. */
    private String userText;
    private Integer textColor;
    private Integer textSize;
    private Integer borderColor;
    private Integer backgroundColor;
    private Integer drawable;
    private Float width;
    private Float height;
    private Float left;
    private Float right;
    private Float top;
    private Float bottom;
    /** Not-null value. */
    private String imagePath;
    /** Not-null value. */
    private String type;
    private java.util.Date createdAt;
    private java.util.Date updatedAt;
    private Long task;
    /** Not-null value. */
    private String itemSound;
    /** Not-null value. */
    private String result;
    /** Not-null value. */
    private String openApp;
    /** Not-null value. */
    private String openUrl;
    private int allowDragDrop;
    private long dragDropTarget;
    private int cornerRound;
    private long navigateTo;
    private long showedBy;
    private long hideBy;
    private int closeApp;
    private int fontTypeFace;
    private int fontAlign;
    private int autoPlay;
    private int soundDelay;
    private int borderPixel;
    /** Not-null value. */
    private String showedByTarget;
    /** Not-null value. */
    private String hiddenByTarget;
    /** Not-null value. */
    private String readText;
    /** Not-null value. */
    private String writeText;
    private long taskId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemDao myDao;

    private List<Result> results;

    public Item() {
    }

    public Item(Long id) {
        this.id = id;
    }

    public Item(Long id, Float x, Float y, Integer rotation, Long key, Integer isCircleView, Integer circleColor, String userText, Integer textColor, Integer textSize, Integer borderColor, Integer backgroundColor, Integer drawable, Float width, Float height, Float left, Float right, Float top, Float bottom, String imagePath, String type, java.util.Date createdAt, java.util.Date updatedAt, Long task, String itemSound, String result, String openApp, String openUrl, int allowDragDrop, long dragDropTarget, int cornerRound, long navigateTo, long showedBy, long hideBy, int closeApp, int fontTypeFace, int fontAlign, int autoPlay, int soundDelay, int borderPixel, String showedByTarget, String hiddenByTarget, String readText, String writeText, long taskId) {
        this.id = id;
        this.x = x;
        this.y = y;
        this.rotation = rotation;
        this.key = key;
        this.isCircleView = isCircleView;
        this.circleColor = circleColor;
        this.userText = userText;
        this.textColor = textColor;
        this.textSize = textSize;
        this.borderColor = borderColor;
        this.backgroundColor = backgroundColor;
        this.drawable = drawable;
        this.width = width;
        this.height = height;
        this.left = left;
        this.right = right;
        this.top = top;
        this.bottom = bottom;
        this.imagePath = imagePath;
        this.type = type;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.task = task;
        this.itemSound = itemSound;
        this.result = result;
        this.openApp = openApp;
        this.openUrl = openUrl;
        this.allowDragDrop = allowDragDrop;
        this.dragDropTarget = dragDropTarget;
        this.cornerRound = cornerRound;
        this.navigateTo = navigateTo;
        this.showedBy = showedBy;
        this.hideBy = hideBy;
        this.closeApp = closeApp;
        this.fontTypeFace = fontTypeFace;
        this.fontAlign = fontAlign;
        this.autoPlay = autoPlay;
        this.soundDelay = soundDelay;
        this.borderPixel = borderPixel;
        this.showedByTarget = showedByTarget;
        this.hiddenByTarget = hiddenByTarget;
        this.readText = readText;
        this.writeText = writeText;
        this.taskId = taskId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Float getX() {
        return x;
    }

    public void setX(Float x) {
        this.x = x;
    }

    public Float getY() {
        return y;
    }

    public void setY(Float y) {
        this.y = y;
    }

    public Integer getRotation() {
        return rotation;
    }

    public void setRotation(Integer rotation) {
        this.rotation = rotation;
    }

    public Long getKey() {
        return key;
    }

    public void setKey(Long key) {
        this.key = key;
    }

    public Integer getIsCircleView() {
        return isCircleView;
    }

    public void setIsCircleView(Integer isCircleView) {
        this.isCircleView = isCircleView;
    }

    public Integer getCircleColor() {
        return circleColor;
    }

    public void setCircleColor(Integer circleColor) {
        this.circleColor = circleColor;
    }

    /** Not-null value. */
    public String getUserText() {
        return userText;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUserText(String userText) {
        this.userText = userText;
    }

    public Integer getTextColor() {
        return textColor;
    }

    public void setTextColor(Integer textColor) {
        this.textColor = textColor;
    }

    public Integer getTextSize() {
        return textSize;
    }

    public void setTextSize(Integer textSize) {
        this.textSize = textSize;
    }

    public Integer getBorderColor() {
        return borderColor;
    }

    public void setBorderColor(Integer borderColor) {
        this.borderColor = borderColor;
    }

    public Integer getBackgroundColor() {
        return backgroundColor;
    }

    public void setBackgroundColor(Integer backgroundColor) {
        this.backgroundColor = backgroundColor;
    }

    public Integer getDrawable() {
        return drawable;
    }

    public void setDrawable(Integer drawable) {
        this.drawable = drawable;
    }

    public Float getWidth() {
        return width;
    }

    public void setWidth(Float width) {
        this.width = width;
    }

    public Float getHeight() {
        return height;
    }

    public void setHeight(Float height) {
        this.height = height;
    }

    public Float getLeft() {
        return left;
    }

    public void setLeft(Float left) {
        this.left = left;
    }

    public Float getRight() {
        return right;
    }

    public void setRight(Float right) {
        this.right = right;
    }

    public Float getTop() {
        return top;
    }

    public void setTop(Float top) {
        this.top = top;
    }

    public Float getBottom() {
        return bottom;
    }

    public void setBottom(Float bottom) {
        this.bottom = bottom;
    }

    /** Not-null value. */
    public String getImagePath() {
        return imagePath;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    /** Not-null value. */
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(String type) {
        this.type = type;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    public Long getTask() {
        return task;
    }

    public void setTask(Long task) {
        this.task = task;
    }

    /** Not-null value. */
    public String getItemSound() {
        return itemSound;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setItemSound(String itemSound) {
        this.itemSound = itemSound;
    }

    /** Not-null value. */
    public String getResult() {
        return result;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setResult(String result) {
        this.result = result;
    }

    /** Not-null value. */
    public String getOpenApp() {
        return openApp;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOpenApp(String openApp) {
        this.openApp = openApp;
    }

    /** Not-null value. */
    public String getOpenUrl() {
        return openUrl;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOpenUrl(String openUrl) {
        this.openUrl = openUrl;
    }

    public int getAllowDragDrop() {
        return allowDragDrop;
    }

    public void setAllowDragDrop(int allowDragDrop) {
        this.allowDragDrop = allowDragDrop;
    }

    public long getDragDropTarget() {
        return dragDropTarget;
    }

    public void setDragDropTarget(long dragDropTarget) {
        this.dragDropTarget = dragDropTarget;
    }

    public int getCornerRound() {
        return cornerRound;
    }

    public void setCornerRound(int cornerRound) {
        this.cornerRound = cornerRound;
    }

    public long getNavigateTo() {
        return navigateTo;
    }

    public void setNavigateTo(long navigateTo) {
        this.navigateTo = navigateTo;
    }

    public long getShowedBy() {
        return showedBy;
    }

    public void setShowedBy(long showedBy) {
        this.showedBy = showedBy;
    }

    public long getHideBy() {
        return hideBy;
    }

    public void setHideBy(long hideBy) {
        this.hideBy = hideBy;
    }

    public int getCloseApp() {
        return closeApp;
    }

    public void setCloseApp(int closeApp) {
        this.closeApp = closeApp;
    }

    public int getFontTypeFace() {
        return fontTypeFace;
    }

    public void setFontTypeFace(int fontTypeFace) {
        this.fontTypeFace = fontTypeFace;
    }

    public int getFontAlign() {
        return fontAlign;
    }

    public void setFontAlign(int fontAlign) {
        this.fontAlign = fontAlign;
    }

    public int getAutoPlay() {
        return autoPlay;
    }

    public void setAutoPlay(int autoPlay) {
        this.autoPlay = autoPlay;
    }

    public int getSoundDelay() {
        return soundDelay;
    }

    public void setSoundDelay(int soundDelay) {
        this.soundDelay = soundDelay;
    }

    public int getBorderPixel() {
        return borderPixel;
    }

    public void setBorderPixel(int borderPixel) {
        this.borderPixel = borderPixel;
    }

    /** Not-null value. */
    public String getShowedByTarget() {
        return showedByTarget;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setShowedByTarget(String showedByTarget) {
        this.showedByTarget = showedByTarget;
    }

    /** Not-null value. */
    public String getHiddenByTarget() {
        return hiddenByTarget;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setHiddenByTarget(String hiddenByTarget) {
        this.hiddenByTarget = hiddenByTarget;
    }

    /** Not-null value. */
    public String getReadText() {
        return readText;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setReadText(String readText) {
        this.readText = readText;
    }

    /** Not-null value. */
    public String getWriteText() {
        return writeText;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setWriteText(String writeText) {
        this.writeText = writeText;
    }

    public long getTaskId() {
        return taskId;
    }

    public void setTaskId(long taskId) {
        this.taskId = taskId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Result> getResults() {
        if (results == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ResultDao targetDao = daoSession.getResultDao();
            List<Result> resultsNew = targetDao._queryItem_Results(id);
            synchronized (this) {
                if(results == null) {
                    results = resultsNew;
                }
            }
        }
        return results;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetResults() {
        results = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
