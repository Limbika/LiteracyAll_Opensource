package com.literacyall.app.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.literacyall.app.dao.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property UniqId = new Property(1, long.class, "uniqId", false, "UNIQ_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property TaskImage = new Property(3, String.class, "taskImage", false, "TASK_IMAGE");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property BackgroundColor = new Property(5, int.class, "backgroundColor", false, "BACKGROUND_COLOR");
        public final static Property SlideSequence = new Property(6, int.class, "slideSequence", false, "SLIDE_SEQUENCE");
        public final static Property Active = new Property(7, Boolean.class, "active", false, "ACTIVE");
        public final static Property CreatedAt = new Property(8, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(9, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property TaskPackId = new Property(10, Long.class, "taskPackId", false, "TASK_PACK_ID");
        public final static Property FeedbackImage = new Property(11, String.class, "feedbackImage", false, "FEEDBACK_IMAGE");
        public final static Property FeedbackAnimation = new Property(12, int.class, "feedbackAnimation", false, "FEEDBACK_ANIMATION");
        public final static Property PositiveAnimation = new Property(13, int.class, "positiveAnimation", false, "POSITIVE_ANIMATION");
        public final static Property NegativeAnimation = new Property(14, int.class, "negativeAnimation", false, "NEGATIVE_ANIMATION");
        public final static Property FeedbackSound = new Property(15, String.class, "feedbackSound", false, "FEEDBACK_SOUND");
        public final static Property PositiveSound = new Property(16, String.class, "positiveSound", false, "POSITIVE_SOUND");
        public final static Property NegativeSound = new Property(17, String.class, "negativeSound", false, "NEGATIVE_SOUND");
        public final static Property FeedbackType = new Property(18, int.class, "feedbackType", false, "FEEDBACK_TYPE");
        public final static Property ErrorBgColor = new Property(19, int.class, "errorBgColor", false, "ERROR_BG_COLOR");
        public final static Property ErrorImage = new Property(20, String.class, "errorImage", false, "ERROR_IMAGE");
        public final static Property Errortext = new Property(21, String.class, "errortext", false, "ERRORTEXT");
        public final static Property ErrorMandatoryScreen = new Property(22, int.class, "errorMandatoryScreen", false, "ERROR_MANDATORY_SCREEN");
        public final static Property SequenceText = new Property(23, String.class, "sequenceText", false, "SEQUENCE_TEXT");
        public final static Property UserId = new Property(24, long.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;

    private Query<Task> user_TasksQuery;

    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UNIQ_ID\" INTEGER NOT NULL ," + // 1: uniqId
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"TASK_IMAGE\" TEXT NOT NULL ," + // 3: taskImage
                "\"TYPE\" TEXT NOT NULL ," + // 4: type
                "\"BACKGROUND_COLOR\" INTEGER NOT NULL ," + // 5: backgroundColor
                "\"SLIDE_SEQUENCE\" INTEGER NOT NULL ," + // 6: slideSequence
                "\"ACTIVE\" INTEGER," + // 7: active
                "\"CREATED_AT\" INTEGER," + // 8: createdAt
                "\"UPDATED_AT\" INTEGER," + // 9: updatedAt
                "\"TASK_PACK_ID\" INTEGER," + // 10: taskPackId
                "\"FEEDBACK_IMAGE\" TEXT NOT NULL ," + // 11: feedbackImage
                "\"FEEDBACK_ANIMATION\" INTEGER NOT NULL ," + // 12: feedbackAnimation
                "\"POSITIVE_ANIMATION\" INTEGER NOT NULL ," + // 13: positiveAnimation
                "\"NEGATIVE_ANIMATION\" INTEGER NOT NULL ," + // 14: negativeAnimation
                "\"FEEDBACK_SOUND\" TEXT NOT NULL ," + // 15: feedbackSound
                "\"POSITIVE_SOUND\" TEXT NOT NULL ," + // 16: positiveSound
                "\"NEGATIVE_SOUND\" TEXT NOT NULL ," + // 17: negativeSound
                "\"FEEDBACK_TYPE\" INTEGER NOT NULL ," + // 18: feedbackType
                "\"ERROR_BG_COLOR\" INTEGER NOT NULL ," + // 19: errorBgColor
                "\"ERROR_IMAGE\" TEXT NOT NULL ," + // 20: errorImage
                "\"ERRORTEXT\" TEXT NOT NULL ," + // 21: errortext
                "\"ERROR_MANDATORY_SCREEN\" INTEGER NOT NULL ," + // 22: errorMandatoryScreen
                "\"SEQUENCE_TEXT\" TEXT NOT NULL ," + // 23: sequenceText
                "\"USER_ID\" INTEGER NOT NULL );"); // 24: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUniqId());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getTaskImage());
        stmt.bindString(5, entity.getType());
        stmt.bindLong(6, entity.getBackgroundColor());
        stmt.bindLong(7, entity.getSlideSequence());
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(8, active ? 1L: 0L);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(9, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(10, updatedAt.getTime());
        }
 
        Long taskPackId = entity.getTaskPackId();
        if (taskPackId != null) {
            stmt.bindLong(11, taskPackId);
        }
        stmt.bindString(12, entity.getFeedbackImage());
        stmt.bindLong(13, entity.getFeedbackAnimation());
        stmt.bindLong(14, entity.getPositiveAnimation());
        stmt.bindLong(15, entity.getNegativeAnimation());
        stmt.bindString(16, entity.getFeedbackSound());
        stmt.bindString(17, entity.getPositiveSound());
        stmt.bindString(18, entity.getNegativeSound());
        stmt.bindLong(19, entity.getFeedbackType());
        stmt.bindLong(20, entity.getErrorBgColor());
        stmt.bindString(21, entity.getErrorImage());
        stmt.bindString(22, entity.getErrortext());
        stmt.bindLong(23, entity.getErrorMandatoryScreen());
        stmt.bindString(24, entity.getSequenceText());
        stmt.bindLong(25, entity.getUserId());
    }

    @Override
    protected void attachEntity(Task entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // uniqId
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // taskImage
            cursor.getString(offset + 4), // type
            cursor.getInt(offset + 5), // backgroundColor
            cursor.getInt(offset + 6), // slideSequence
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // active
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // createdAt
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // updatedAt
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // taskPackId
            cursor.getString(offset + 11), // feedbackImage
            cursor.getInt(offset + 12), // feedbackAnimation
            cursor.getInt(offset + 13), // positiveAnimation
            cursor.getInt(offset + 14), // negativeAnimation
            cursor.getString(offset + 15), // feedbackSound
            cursor.getString(offset + 16), // positiveSound
            cursor.getString(offset + 17), // negativeSound
            cursor.getInt(offset + 18), // feedbackType
            cursor.getInt(offset + 19), // errorBgColor
            cursor.getString(offset + 20), // errorImage
            cursor.getString(offset + 21), // errortext
            cursor.getInt(offset + 22), // errorMandatoryScreen
            cursor.getString(offset + 23), // sequenceText
            cursor.getLong(offset + 24) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUniqId(cursor.getLong(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setTaskImage(cursor.getString(offset + 3));
        entity.setType(cursor.getString(offset + 4));
        entity.setBackgroundColor(cursor.getInt(offset + 5));
        entity.setSlideSequence(cursor.getInt(offset + 6));
        entity.setActive(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setCreatedAt(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUpdatedAt(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setTaskPackId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setFeedbackImage(cursor.getString(offset + 11));
        entity.setFeedbackAnimation(cursor.getInt(offset + 12));
        entity.setPositiveAnimation(cursor.getInt(offset + 13));
        entity.setNegativeAnimation(cursor.getInt(offset + 14));
        entity.setFeedbackSound(cursor.getString(offset + 15));
        entity.setPositiveSound(cursor.getString(offset + 16));
        entity.setNegativeSound(cursor.getString(offset + 17));
        entity.setFeedbackType(cursor.getInt(offset + 18));
        entity.setErrorBgColor(cursor.getInt(offset + 19));
        entity.setErrorImage(cursor.getString(offset + 20));
        entity.setErrortext(cursor.getString(offset + 21));
        entity.setErrorMandatoryScreen(cursor.getInt(offset + 22));
        entity.setSequenceText(cursor.getString(offset + 23));
        entity.setUserId(cursor.getLong(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tasks" to-many relationship of User. */
    public List<Task> _queryUser_Tasks(long userId) {
        synchronized (this) {
            if (user_TasksQuery == null) {
                QueryBuilder<Task> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_TasksQuery = queryBuilder.build();
            }
        }
        Query<Task> query = user_TasksQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
